<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
    <munit:config mock-connectors="false" mock-inbounds="false" name="munit" doc:name="MUnit configuration"/>
    <spring:beans>
        <spring:import resource="classpath:poc_nisc_service_delivery_process_api.xml"/>
        <spring:import resource="classpath:poc_nisc_service_delivery_process_api_config.xml"/>
        <spring:import resource="classpath:service_delivery_process_api_business.xml"/>
        <spring:import resource="classpath:messages-for-test-suite.xml"/>
    </spring:beans>
    <http:request-config name="HTTP_Raml_Test_Request_Configuration" host="localhost" port="${http.port}" basePath="/api" doc:name="HTTP Request Configuration">
        <http:raml-api-configuration location="poc_nisc_service_delivery_process_api.raml"/>
    </http:request-config>
    <munit:before-test name="poc_nisc_service_delivery_system_api-test-suiteBefore_Test" description="Before tests actions">
        <flow-ref name="setExpectedPostCreateServiceResponse" doc:name="setExpectedPostCreateServiceResponse"/>
    </munit:before-test>
    <munit:test name="FuntionalTest-GivenACreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnAValidResponse" description="FuntionalTest-GivenACreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnAValidResponse">
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock-createAServiceOrderToProcess">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('createAServiceOrderToProcess')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[flowVars.postCreateServiceResponse]" mimeType="application/java"/>
        </mock:when>
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder"/>
        <byte-array-to-object-transformer doc:name="Byte Array to Object"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
        <munit:assert-payload-equals expectedValue="#[flowVars.postCreateServiceResponse]" doc:name="Assert Payload"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenACreateServiceOrderWhenPostRequestToServiceOrderAPIThenVerifyThatTheRequestIsTheExpectedFormat" description="FuntionalTest-GivenACreateServiceOrderWhenPostRequestToServiceOrderAPIThenVerifyThatTheRequestIsTheExpectedFormat">
        <mock:spy messageProcessor="mule:sub-flow" doc:name="Spy-createAServiceOrderToProcess">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('createAServiceOrderToProcess')]"/>
            </mock:with-attributes>
            <mock:assertions-before-call>
                <logger message="&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;AQUI: #[payload]" level="INFO" doc:name="Logger"/>
                <munit:assert-on-equals message="It is not the expected request" expectedValue="#[&quot;0123456789&quot;]" actualValue="#[payload.CustomerId]" doc:name="Assert Equals for expected CustomerId"/>
            </mock:assertions-before-call>
        </mock:spy>
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock-createAServiceOrderToProcess">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('createAServiceOrderToProcess')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[flowVars.postCreateServiceResponse]" mimeType="application/json"/>
        </mock:when>
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder"/>
        <mock:verify-call messageProcessor="mule:sub-flow" times="1" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('createAServiceOrderToProcess')]"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="FuntionalTest-GivenACreateServiceOrderWhenPostRequestToServiceOrderAPIThenVerifyThatTheRequestWasRoutedToRigthImplementation" description="FuntionalTest-GivenACreateServiceOrderWhenPostRequestToServiceOrderAPIThenVerifyThatTheRequestWasRoutedToRigthImplementation">
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock-createAServiceOrderToProcess">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('createAServiceOrderToProcess')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[flowVars.postCreateServiceResponse]" mimeType="application/json"/>
        </mock:when>
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder"/>
        <mock:verify-call messageProcessor="mule:sub-flow" times="1" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('createAServiceOrderToProcess')]"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="FuntionalTest-GivenACreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnAHTTPSTATUS201" description="FuntionalTest-GivenACreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnAHTTPSTATUS201">
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock-createAServiceOrderToProcess">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('createAServiceOrderToProcess')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[flowVars.postCreateServiceResponse]" mimeType="application/json"/>
        </mock:when>
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder"/>
        <munit:assert-on-equals message="It is not the expected HTTP Status Code for the response" expectedValue="#[201]" actualValue="#[message.inboundProperties.'http.status']" doc:name="Assert Equals for Expected HTTP 201 Status Code Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenACreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnExpectedContentType" description="FuntionalTest-GivenACreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnExpectedContentType">
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock-createAServiceOrderToProcess">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('createAServiceOrderToProcess')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[flowVars.postCreateServiceResponse]" mimeType="application/json"/>
        </mock:when>
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder"/>
        <munit:assert-on-equals message="It is not the expected Content-Type for the response" expectedValue="#['application/json;charset=windows-1252']" actualValue="#[message.inboundProperties.'Content-Type']" doc:name="Assert Equals for Expected Content-Type Response"/>
    </munit:test>
</mule>
