<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
    <munit:config mock-connectors="false" mock-inbounds="false" name="munit" doc:name="MUnit configuration"/>
    <spring:beans>
        <spring:import resource="classpath:poc_nisc_service_delivery_process_api.xml"/>
        <spring:import resource="classpath:poc_nisc_service_delivery_process_api_config.xml"/>
        <spring:import resource="classpath:service_delivery_process_api_business.xml"/>
        <spring:import resource="classpath:messages-for-test-suite.xml"/>
    </spring:beans>
    <http:request-config name="HTTP_Raml_Test_Request_Configuration" host="localhost" port="${http.port}" basePath="/api" doc:name="HTTP Request Configuration">
        <http:raml-api-configuration location="poc_nisc_service_delivery_process_api.raml"/>
    </http:request-config>
    <http:request-config name="HTTP_Invalid_Request_Configuration" host="localhost" port="${http.port}" basePath="/api" doc:name="HTTP Request Configuration"/>
    <munit:before-test name="poc_nisc_service_delivery_system_api-test-suiteBefore_Test" description="Before tests actions">
        <flow-ref name="setExpectedVarErrorMessage415" doc:name="setExpectedVarErrorMessage415"/>
        <flow-ref name="setExpectedVarErrorMessage400" doc:name="setExpectedVarErrorMessage400"/>
        <flow-ref name="setExpectedVarErrorMessage404" doc:name="setExpectedVarErrorMessage404"/>
        <flow-ref name="setExpectedVarErrorMessage405" doc:name="setExpectedVarErrorMessage405"/>
        <flow-ref name="setExpectedVarErrorMessage406" doc:name="setExpectedVarErrorMessage406"/>
        <flow-ref name="setExpectedVarErrorMessage500" doc:name="setExpectedVarErrorMessage500"/>
    </munit:before-test>
    <munit:test name="FuntionalTest-GivenANullCreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnA415ErrorMessage" description="FuntionalTest-GivenANullCreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnA415ErrorMessage">
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <munit:set-null-payload doc:name="Set Null Payload"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <byte-array-to-object-transformer doc:name="Byte Array to Object"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
        <munit:assert-payload-equals expectedValue="#[flowVars.errorMessage415]" doc:name="Assert Payload"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenANullCreateServiceOrderWhenPostRequestToServiceOrderAPIThenVerifyThatTheRequestWasNotRoutedToAImplementation" description="FuntionalTest-GivenANullCreateServiceOrderWhenPostRequestToServiceOrderAPIThenVerifyThatTheRequestWasNotRoutedToAImplementation">
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <munit:set-null-payload doc:name="Set Null Payload"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <mock:verify-call messageProcessor="mule:flow" times="0" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('post:/service/order:application/json:poc_nisc_service_delivery_system_api-config')]"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="FuntionalTest-GivenANullCreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnAHTTPSTATUS415" description="FuntionalTest-GivenANullCreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnAHTTPSTATUS415">
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <munit:set-null-payload doc:name="Set Null Payload"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected HTTP Status Code for the response" expectedValue="#[415]" actualValue="#[message.inboundProperties.'http.status']" doc:name="Assert Equals for Expected HTTP 415 Status Code Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenANullCreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnExpectedContentType" description="FuntionalTest-GivenANullCreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnExpectedContentType">
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <munit:set-null-payload doc:name="Set Null Payload"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected Content-Type for the response" expectedValue="#['application/json']" actualValue="#[message.inboundProperties.'Content-Type']" doc:name="Assert Equals for Expected Content-Type Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenAnInvalidCreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnA400ErrorMessage" description="FuntionalTest-GivenAnInvalidCreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnA400ErrorMessage">
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
}]]></dw:set-payload>
        </dw:transform-message>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <byte-array-to-object-transformer doc:name="Byte Array to Object"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
        <munit:assert-payload-equals expectedValue="#[flowVars.errorMessage400]" doc:name="Assert Payload"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenAnInvalidCreateServiceOrderWhenPostRequestToServiceOrderAPIThenVerifyThatTheRequestWasNotRoutedToAnImplementation" description="FuntionalTest-GivenAnInvalidCreateServiceOrderWhenPostRequestToServiceOrderAPIThenVerifyThatTheRequestWasNotRoutedToAnImplementation">
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
}]]></dw:set-payload>
        </dw:transform-message>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <mock:verify-call messageProcessor="mule:flow" times="0" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('post:/service/order:application/json:poc_nisc_service_delivery_system_api-config')]"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="FuntionalTest-GivenAnInvalidCreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnAHTTPSTATUS400" description="FuntionalTest-GivenAnInvalidCreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnAHTTPSTATUS400">
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
}]]></dw:set-payload>
        </dw:transform-message>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected HTTP Status Code for the response" expectedValue="#[400]" actualValue="#[message.inboundProperties.'http.status']" doc:name="Assert Equals for Expected HTTP 400 Status Code Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenAnInvalidCreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnExpectedContentType" description="FuntionalTest-GivenAnInvalidCreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnExpectedContentType">
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
}]]></dw:set-payload>
        </dw:transform-message>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected Content-Type for the response" expectedValue="#['application/json']" actualValue="#[message.inboundProperties.'Content-Type']" doc:name="Assert Equals for Expected Content-Type Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenACreateServiceOrderWhenCallInvalidPostRequestToServiceOrderAPIThenReturnA404ErrorMessage" description="FuntionalTest-GivenACreateServiceOrderWhenCallInvalidPostRequestToServiceOrderAPIThenReturnA404ErrorMessage">
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Invalid_Request_Configuration" path="/service/orders" method="POST" doc:name="HTTP-POST-CreateServiceOrder">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <byte-array-to-object-transformer doc:name="Byte Array to Object"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
        <munit:assert-payload-equals expectedValue="#[flowVars.errorMessage404]" doc:name="Assert Payload"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenACreateServiceOrderWhenCallInvalidPostRequestToServiceOrderAPIThenVerifyThatTheRequestWasNotRoutedToAnImplementation" description="FuntionalTest-GivenACreateServiceOrderWhenCallInvalidPostRequestToServiceOrderAPIThenVerifyThatTheRequestWasNotRoutedToAnImplementation">
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Invalid_Request_Configuration" path="/service/orders" method="POST" doc:name="HTTP-POST-CreateServiceOrder">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <mock:verify-call messageProcessor="mule:flow" times="0" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('post:/service/order:application/json:poc_nisc_service_delivery_system_api-config')]"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="FuntionalTest-GivenAnInvalidCreateServiceOrderWhenCallInvalidPostRequestToServiceOrderAPIThenReturnAHTTPSTATUS404" description="FuntionalTest-GivenAnInvalidCreateServiceOrderWhenCallInvalidPostRequestToServiceOrderAPIThenReturnAHTTPSTATUS404">
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Invalid_Request_Configuration" path="/service/orders" method="POST" doc:name="HTTP-POST-CreateServiceOrder">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected HTTP Status Code for the response" expectedValue="#[404]" actualValue="#[message.inboundProperties.'http.status']" doc:name="Assert Equals for Expected HTTP 404 Status Code Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenACreateServiceOrderWhenCallInvalidPostRequestToServiceOrderAPIThenReturnExpectedContentType" description="FuntionalTest-GivenACreateServiceOrderWhenCallInvalidPostRequestToServiceOrderAPIThenReturnExpectedContentType">
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Invalid_Request_Configuration" path="/service/orders" method="POST" doc:name="HTTP-POST-CreateServiceOrder">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected Content-Type for the response" expectedValue="#['application/json']" actualValue="#[message.inboundProperties.'Content-Type']" doc:name="Assert Equals for Expected Content-Type Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenACreateServiceOrderWhenPATCHRequestToServiceOrderAPIThenReturnA405ErrorMessage" description="FuntionalTest-GivenACreateServiceOrderWhenPATCHRequestToServiceOrderAPIThenReturnA405ErrorMessage">
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Invalid_Request_Configuration" path="/service/order" method="PATCH" doc:name="HTTP-PATCH-CreateServiceOrder">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <byte-array-to-object-transformer doc:name="Byte Array to Object"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
        <munit:assert-payload-equals expectedValue="#[flowVars.errorMessage405]" doc:name="Assert Payload"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenACreateServiceOrderWhenPATCHRequestToServiceOrderAPIThenVerifyThatTheRequestWasNotRoutedToAnImplementation" description="FuntionalTest-GivenACreateServiceOrderWhenPATCHRequestToServiceOrderAPIThenVerifyThatTheRequestWasNotRoutedToAnImplementation">
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Invalid_Request_Configuration" path="/service/order" method="PATCH" doc:name="HTTP-PATCH-CreateServiceOrder">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <mock:verify-call messageProcessor="mule:flow" times="0" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('post:/service/order:application/json:poc_nisc_service_delivery_system_api-config')]"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="FuntionalTest-GivenACreateServiceOrderWhenPATCHRequestToServiceOrderAPIThenReturnAHTTPSTATUS405" description="FuntionalTest-GivenACreateServiceOrderWhenPATCHRequestToServiceOrderAPIThenReturnAHTTPSTATUS405">
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Invalid_Request_Configuration" path="/service/order" method="PATCH" doc:name="HTTP-PATCH-CreateServiceOrder">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected HTTP Status Code for the response" expectedValue="#[405]" actualValue="#[message.inboundProperties.'http.status']" doc:name="Assert Equals for Expected HTTP 405 Status Code Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenACreateServiceOrderWhenPATCHRequestToServiceOrderAPIThenReturnExpectedContentType" description="FuntionalTest-GivenACreateServiceOrderWhenPATCHRequestToServiceOrderAPIThenReturnExpectedContentType">
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Invalid_Request_Configuration" path="/service/order" method="PATCH" doc:name="HTTP-PATCH-CreateServiceOrder">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected Content-Type for the response" expectedValue="#['application/json']" actualValue="#[message.inboundProperties.'Content-Type']" doc:name="Assert Equals for Expected Content-Type Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenAnInvalidAcceptContentTypeAsHeaderInCreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnA406ErrorMessage" description="FuntionalTest-GivenAnInvalidAcceptContentTypeAsHeaderInCreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnA406ErrorMessage">
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder">
            <http:request-builder>
                <http:header headerName="Accept" value="#['application/xml']"/>
            </http:request-builder>
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <byte-array-to-object-transformer doc:name="Byte Array to Object"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
        <munit:assert-payload-equals expectedValue="#[flowVars.errorMessage406]" doc:name="Assert Payload"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenAnInvalidAcceptContentTypeAsHeaderInCreateServiceOrderWhenPostRequestToServiceOrderAPIThenVerifyThatTheRequestWasNotRoutedToAnImplementation" description="FuntionalTest-GivenAnInvalidAcceptContentTypeAsHeaderInCreateServiceOrderWhenPostRequestToServiceOrderAPIThenVerifyThatTheRequestWasNotRoutedToAnImplementation">
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder">
            <http:request-builder>
                <http:header headerName="Accept" value="#['application/xml']"/>
            </http:request-builder>
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <mock:verify-call messageProcessor="mule:flow" times="0" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('post:/service/order:application/json:poc_nisc_service_delivery_system_api-config')]"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="FuntionalTest-GivenAnInvalidAcceptContentTypeAsHeaderInCreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnAHTTPSTATUS406" description="FuntionalTest-GivenAnInvalidAcceptContentTypeAsHeaderInCreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnAHTTPSTATUS406">
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder">
            <http:request-builder>
                <http:header headerName="Accept" value="#['application/xml']"/>
            </http:request-builder>
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected HTTP Status Code for the response" expectedValue="#[406]" actualValue="#[message.inboundProperties.'http.status']" doc:name="Assert Equals for Expected HTTP 406 Status Code Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenAnInvalidAcceptContentTypeAsHeaderInCreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnExpectedContentType" description="FuntionalTest-GivenAnInvalidAcceptContentTypeAsHeaderInCreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnExpectedContentType">
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder">
            <http:request-builder>
                <http:header headerName="Accept" value="#['application/xml']"/>
            </http:request-builder>
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected Content-Type for the response" expectedValue="#['application/json']" actualValue="#[message.inboundProperties.'Content-Type']" doc:name="Assert Equals for Expected Content-Type Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenACreateServiceOrderWhenPostRequestToServiceOrderAPIAndSometingFailThenReturnA500ErrorMessage" description="FuntionalTest-GivenACreateServiceOrderWhenPostRequestToServiceOrderAPIAndSometingFailThenReturnA500ErrorMessage">
        <mock:throw-an exception-ref="#[new java.lang.Exception(&quot;Internal Server Error For Munit TEST.&quot;)]" whenCalling="mule:flow" doc:name="Throw an Exception when call - post:/service/order:application/json:poc_nisc_service_delivery_process_api-config">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('post:/service/order:application/json:poc_nisc_service_delivery_process_api-config')]"/>
            </mock:with-attributes>
        </mock:throw-an>
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder">
            <http:failure-status-code-validator values="400"/>
        </http:request>
        <byte-array-to-object-transformer doc:name="Byte Array to Object"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
        <munit:assert-payload-equals expectedValue="#[flowVars.errorMessage500]" doc:name="Assert Payload"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenACreateServiceOrderWhenPostRequestToServiceOrderAPIAndSometingFailThenVerifyThatTheRequestWasRoutedToAnImplementation" description="FuntionalTest-GivenACreateServiceOrderWhenPostRequestToServiceOrderAPIAndSometingFailThenVerifyThatTheRequestWasRoutedToAnImplementation">
        <mock:throw-an exception-ref="#[new java.lang.Exception(&quot;Internal Server Error For Munit TEST.&quot;)]" whenCalling="mule:flow" doc:name="Throw an Exception when call - post:/service/order:application/json:poc_nisc_service_delivery_process_api-config">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('post:/service/order:application/json:poc_nisc_service_delivery_process_api-config')]"/>
            </mock:with-attributes>
        </mock:throw-an>
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder">
            <http:failure-status-code-validator values="400"/>
        </http:request>
        <mock:verify-call messageProcessor="mule:flow" times="1" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('post:/service/order:application/json:poc_nisc_service_delivery_process_api-config')]"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="FuntionalTest-GivenACreateServiceOrderWhenPostRequestToServiceOrderAPIAndSometingFailThenReturnAHTTPSTATUS500" description="FuntionalTest-GivenAnInvalidCreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnAHTTPSTATUS400">
        <mock:throw-an exception-ref="#[new java.lang.Exception(&quot;Internal Server Error For Munit TEST.&quot;)]" whenCalling="mule:flow" doc:name="Throw an Exception when call - post:/service/order:application/json:poc_nisc_service_delivery_process_api-config">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('post:/service/order:application/json:poc_nisc_service_delivery_process_api-config')]"/>
            </mock:with-attributes>
        </mock:throw-an>
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder">
            <http:failure-status-code-validator values="400"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected HTTP Status Code for the response" expectedValue="#[500]" actualValue="#[message.inboundProperties.'http.status']" doc:name="Assert Equals for Expected HTTP 500 Status Code Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenACreateServiceOrderWhenPostRequestToServiceOrderAPIAndSometingFailThenReturnExpectedContentType" description="FuntionalTest-GivenAnInvalidCreateServiceOrderWhenPostRequestToServiceOrderAPIThenReturnAHTTPSTATUS400">
        <mock:throw-an exception-ref="#[new java.lang.Exception(&quot;Internal Server Error For Munit TEST.&quot;)]" whenCalling="mule:flow" doc:name="Throw an Exception when call - post:/service/order:application/json:poc_nisc_service_delivery_process_api-config">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('post:/service/order:application/json:poc_nisc_service_delivery_process_api-config')]"/>
            </mock:with-attributes>
        </mock:throw-an>
        <flow-ref name="getCreateServiceRequestForTest" doc:name="getCreateServiceRequestForTest"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/service/order" method="POST" doc:name="HTTP-POST-CreateServiceOrder">
            <http:failure-status-code-validator values="400"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected Content-Type for the response" expectedValue="#['application/json']" actualValue="#[message.inboundProperties.'Content-Type']" doc:name="Assert Equals for Expected Content-Type Response"/>
    </munit:test>
</mule>
